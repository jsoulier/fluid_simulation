#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(8u, 1u, 1u);

kernel void main0(texture3d<float> inImage [[texture(0)]], texture3d<float, access::write> outImage [[texture(1)]], sampler inImageSmplr [[sampler(0)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    int3 size = int3(inImage.get_width(), inImage.get_height(), inImage.get_depth());
    uint id = gl_GlobalInvocationID.x;
    uint N = uint(size.x);
    spvUnsafeArray<int3, 8> _83 = spvUnsafeArray<int3, 8>({ int3(0), int3(0, int(N - 1u), 0), int3(0, 0, int(N - 1u)), int3(0, int(N - 1u), int(N - 1u)), int3(int(N - 1u), 0, 0), int3(int(N - 1u), int(N - 1u), 0), int3(int(N - 1u), 0, int(N - 1u)), int3(int(N - 1u), int(N - 1u), int(N - 1u)) });
    spvUnsafeArray<int3, 8> Positions = _83;
    spvUnsafeArray<int3, 8> _131 = spvUnsafeArray<int3, 8>({ int3(1, 0, 0), int3(1, int(N - 1u), 0), int3(1, 0, int(N - 1u)), int3(1, int(N - 1u), int(N - 1u)), int3(int(N - 2u), 0, 0), int3(int(N - 2u), int(N - 1u), 0), int3(int(N - 2u), 0, int(N - 1u)), int3(int(N - 2u), int(N - 1u), int(N - 1u)) });
    spvUnsafeArray<int3, 8> Neighbors1 = _131;
    spvUnsafeArray<int3, 8> _177 = spvUnsafeArray<int3, 8>({ int3(0, 1, 0), int3(0, int(N - 2u), 0), int3(0, 1, int(N - 1u)), int3(0, int(N - 2u), int(N - 1u)), int3(int(N - 1u), 1, 0), int3(int(N - 1u), int(N - 2u), 0), int3(int(N - 1u), 1, int(N - 1u)), int3(int(N - 1u), int(N - 2u), int(N - 1u)) });
    spvUnsafeArray<int3, 8> Neighbors2 = _177;
    spvUnsafeArray<int3, 8> _223 = spvUnsafeArray<int3, 8>({ int3(0, 0, 1), int3(0, int(N - 1u), 1), int3(0, 0, int(N - 2u)), int3(0, int(N - 1u), int(N - 2u)), int3(int(N - 1u), 0, 1), int3(int(N - 1u), int(N - 1u), 1), int3(int(N - 1u), 0, int(N - 2u)), int3(int(N - 1u), int(N - 1u), int(N - 2u)) });
    spvUnsafeArray<int3, 8> Neighbors3 = _223;
    outImage.write(float4(0.3300000131130218505859375 * ((inImage.read(uint3(Neighbors1[id]), 0).x + inImage.read(uint3(Neighbors2[id]), 0).x) + inImage.read(uint3(Neighbors3[id]), 0).x)), uint3(Positions[id]));
}

