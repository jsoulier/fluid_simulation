#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct uniformType
{
    uint type;
};

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(8u, 8u, 1u);

kernel void main0(constant uniformType& _87 [[buffer(0)]], texture3d<float> inImage [[texture(0)]], texture3d<float, access::write> outImage [[texture(1)]], sampler inImageSmplr [[sampler(0)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    int3 size = int3(inImage.get_width(), inImage.get_height(), inImage.get_depth());
    int3 id = int3(gl_GlobalInvocationID);
    if (any(id >= size))
    {
        return;
    }
    uint N = uint(size.x);
    float value;
    if (id.z == 1)
    {
        id.z = int(N - 1u);
        value = inImage.read(uint3(int3(id.x, id.y, int(N - 2u))), 0).x;
    }
    else
    {
        id.z = 0;
        value = inImage.read(uint3(int3(id.x, id.y, 1)), 0).x;
    }
    float _93;
    if (_87.type == 3u)
    {
        _93 = -value;
    }
    else
    {
        _93 = value;
    }
    outImage.write(float4(_93), uint3(id));
}

